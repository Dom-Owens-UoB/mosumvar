devtools::check()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
mosumvar::VAR.sim()
mosumvar::VAR.sim
mosumvar.uni
mosumvar::mosumvar.uni
bootstrap.sim <- function(x, order = 1, G = NULL, uni = FALSE, method = NULL, n.bootstrap = 1000){
n <- nrow(x)
p <- ncol(x)
ar <- ar.ols(x, aic = F, order.max = order)
if(order>1){
coeffs <- list()
for (ii in 1:order) {
coeffs[[ii]] <- as.matrix(ar$ar[,,ii])
}
} else {
coeffs <- as.matrix(ar$ar[,,1])
}
out <- rep(0, n.bootstrap)
for (ii in 1:n.bootstrap) {
x_ii <- VAR.sim(n, mu = ar$x.intercept, coeffs = coeffs)
if(uni){
ms_ii <- mosumvar.uni(x_ii, G = G, order = order, method = method, rm.cross.terms = TRUE, global.resids = TRUE)
} else {
ms_ii <- mosumvar(x_ii, G = G, order = order, method = method )
}
out[ii] <- max(ms_ii$mosum)
}
return(out)
}
library(mosumvar)
bs_try <- bootstrap.sim(x)
bootstrap.sim <- function(x, order = 1, G = NULL, uni = FALSE, method = NULL, n.bootstrap = 1000){
n <- nrow(x)
p <- ncol(x)
ar <- ar.ols(x, aic = F, order.max = order)
if(order>1){
coeffs <- list()
for (ii in 1:order) {
coeffs[[ii]] <- as.matrix(ar$ar[,,ii])
}
} else {
coeffs <- as.matrix(ar$ar[,,1])
}
out <- rep(0, n.bootstrap)
Sigma <- x$var.pred #diag(1, p)
for (ii in 1:n.bootstrap) {
x_ii <- VAR.sim(n, mu = ar$x.intercept, Sigma = Sigma, coeffs = coeffs)
if(uni){
ms_ii <- mosumvar.uni(x_ii, G = G, order = order, method = method, rm.cross.terms = TRUE, global.resids = TRUE)
} else {
ms_ii <- mosumvar(x_ii, G = G, order = order, method = method )
}
out[ii] <- max(ms_ii$mosum)
}
return(out)
}
bs_try <- bootstrap.sim(x)
bootstrap.sim <- function(x, order = 1, G = NULL, uni = FALSE, method = NULL, n.bootstrap = 1000){
n <- nrow(x)
p <- ncol(x)
ar <- ar.ols(x, aic = F, order.max = order)
if(order>1){
coeffs <- list()
for (ii in 1:order) {
coeffs[[ii]] <- as.matrix(ar$ar[,,ii])
}
} else {
coeffs <- as.matrix(ar$ar[,,1])
}
out <- rep(0, n.bootstrap)
Sigma <- ar$var.pred #diag(1, p)
for (ii in 1:n.bootstrap) {
x_ii <- VAR.sim(n, mu = ar$x.intercept, Sigma = Sigma, coeffs = coeffs)
if(uni){
ms_ii <- mosumvar.uni(x_ii, G = G, order = order, method = method, rm.cross.terms = TRUE, global.resids = TRUE)
} else {
ms_ii <- mosumvar(x_ii, G = G, order = order, method = method )
}
out[ii] <- max(ms_ii$mosum)
}
return(out)
}
bs_try <- bootstrap.sim(x)
debugonce(bootstrap.sim)
bs_try <- bootstrap.sim(x)
ar$ar
ar$ar[,,]
ar$ar[,,1]
debugonce(bootstrap.sim)
bs_try <- bootstrap.sim(x)
ar$ar
ar$ar[1,,]
bootstrap.sim <- function(x, order = 1, G = NULL, uni = FALSE, method = NULL, n.bootstrap = 1000){
n <- nrow(x)
p <- ncol(x)
ar <- ar.ols(x, aic = F, order.max = order)
if(order>1){
coeffs <- list()
for (ii in 1:order) {
coeffs[[ii]] <- as.matrix(ar$ar[ii,,])
}
} else {
coeffs <- as.matrix(ar$ar[,,])
}
out <- rep(0, n.bootstrap)
Sigma <- ar$var.pred #diag(1, p)
for (ii in 1:n.bootstrap) {
x_ii <- VAR.sim(n, mu = ar$x.intercept, Sigma = Sigma, coeffs = coeffs)
if(uni){
ms_ii <- mosumvar.uni(x_ii, G = G, order = order, method = method, rm.cross.terms = TRUE, global.resids = TRUE)
} else {
ms_ii <- mosumvar(x_ii, G = G, order = order, method = method )
}
out[ii] <- max(ms_ii$mosum)
}
return(out)
}
bs_try <- bootstrap.sim(x)
bootstrap.sim <- function(x, order = 1, G = NULL, uni = FALSE, method = NULL, n.bootstrap = 1000){
n <- nrow(x)
p <- ncol(x)
ar <- ar.ols(x, aic = F, order.max = order)
if(order>1){
coeffs <- list()
for (ii in 1:order) {
coeffs[[ii]] <- as.matrix(ar$ar[ii,,])
}
} else {
coeffs <- as.matrix(ar$ar[,,])
}
out <- rep(0, n.bootstrap)
Sigma <- ar$var.pred #diag(1, p)
for (ii in 1:n.bootstrap) {
x_ii <- VAR.sim(n, mu = ar$x.intercept, Sigma = Sigma, coeffs = coeffs)
if(uni){
ms_ii <- mosumvar.uni(x_ii, G = G, order = order, method = method, rm.cross.terms = TRUE, global.resids = TRUE)
} else {
ms_ii <- mosumvar(x_ii, G = G, order = order, method = method )
}
out[ii] <- max(ms_ii$mosum)
}
return(out)
}
bs_try <- bootstrap.sim(x, n, uni = T, n.bootstrap = 400)
bs_try <- bootstrap.sim(x, uni = T, n.bootstrap = 400)
summary(bs_try)
cbind(x,x2,x)
quantile(bs_try, 95)
quantile(bs_try, .95)
mosumvar.uni(rbind(x,x2,x), order = 1, thresh = quantile(bs_try, .95))
bs_try <- bootstrap.sim(rbind(x,x2,x), uni = T, n.bootstrap = 400)
quantile(bs_try, .95)
bootstrap.sim <- function(x, order = 1, G = NULL, uni = FALSE, method = c("Wald","Score"), estim = c("C","H"), var.estim = c("Local","Global"),
rm.cross.terms = TRUE, global.resids = TRUE, n.bootstrap = 1000){
n <- nrow(x)
p <- ncol(x)
order <- as.integer(order)
method <- match.arg(method, c("Wald","Score"))
estim <- match.arg(estim, c("C","H"))
var.estim <- match.arg(var.estim, c("Local","Global"))
ar <- ar.ols(x, aic = F, order.max = order)
if(order>1){
coeffs <- list()
for (ii in 1:order) {
coeffs[[ii]] <- as.matrix(ar$ar[ii,,])
}
} else {
coeffs <- as.matrix(ar$ar[,,])
}
out <- rep(0, n.bootstrap)
Sigma <- ar$var.pred #diag(1, p)
for (ii in 1:n.bootstrap) {
x_ii <- VAR.sim(n, mu = ar$x.intercept, Sigma = Sigma, coeffs = coeffs)
if(uni){
ms_ii <- mosumvar.uni(x_ii, G = G, order = order, method = method,
estim = estim, var.estim = var.estim,
rm.cross.terms = rm.cross.terms, global.resids = global.resids)
} else {
ms_ii <- mosumvar(x_ii, G = G, order = order, method = method,  estim = estim, var.estim = var.estim )
}
out[ii] <- max(ms_ii$mosum)
}
return(out)
}
bs_try <- bootstrap.sim(rbind(x,x,x), uni = T, n.bootstrap = 400)
mosumvar.uni(rbind(x,x,x), order = 1, thresh = quantile(bs_try, .95))
quantile(bs_try, .95)
bs_try <- bootstrap.sim(rbind(x,x,x), uni = T, n.bootstrap = 400)
quantile(bs_try, .95)
mosumvar.uni(rbind(x,x,x), order = 1, thresh = quantile(bs_try, .95))
roxygen2::roxygenise()
roxygen2::roxygenise()
10 %%10
11 %%10
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
roxygen2::roxygenise()
rm(list = c("bootstrap.sim", "default.G")
)
roxygen2::roxygenise()
devtools::check()
devtools::check()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
Rcpp::compileAttributes()
devtools::build()
Rcpp::install()
devtools::install()
Rcpp::compileAttributes()
devtools::check()
Rcpp::compileAttributes()
devtools::check()
Rcpp::compileAttributes()
roxygen2::roxygenise()
devtools::check()
devtools::check()
devtools::check()
devtools::build_manual()
devtools::check()
devtools::build_manual()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
get_T_univ
?get_T_univ
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::build()
devtools::install()
matrix(1,1,1)
cbind(1, matrix(1,1,1))
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
as.list(1:1)
as.list(1:2)
devtools::build()
devtools::install()
roxygen2::roxygenise
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
mosumlm <- function(X, y, G = NULL, intercept = TRUE, method = c("Wald", "Score"), alpha = 0.05, criterion= c("eps","eta"), nu=0.25, thresh = NULL, do.plot = TRUE){
X <- as.matrix(X)
if(intercept) X <- cbind(X, 1)
out <- NULL
n <- dim(X)[1]
p <- dim(X)[2]+1
yX <- cbind(y,X)
if(is.null(G)) G <- default.G(n, sqrt(p-1), 1)
method <- match.arg(method, c("Wald","Score"))
criterion <- match.arg(criterion, c("eps","eta"))
nu <- min(1, max(0, nu))
alpha <- min(1, max(0, alpha))
##Test setup----------------------------
if(is.null(thresh)){
c_alpha <- -log(log( (1-alpha)^(-1/2))) #critical value
a <- sqrt(2*log(n/G)) #test transform multipliers
b <- 2*log(n/G) + (p-1)/2 * log(log(n/G)) - log(2/3 * gamma((p-1)/2)) ##CORRECTED
thresh <- (b+c_alpha)/a #threshold
thresh <- max(thresh, sqrt(2*log(n)) + c_alpha/sqrt(2*log(n)) )##ASYMPTOTIC
}
Reject <- FALSE
##Run test-----------------------------
stat <- rep(0, n) #initialise statistic vector
C <-t(yX[,2:p]) %*% (yX[,2:p]) / n
ev <- eigen(C)
##t(ev$vectors) %*% diag( (ev$values)^(-.5) ) %*% (ev$vectors)
if(method == "Wald") {
Croot <-  (ev$vectors) %*% diag( (ev$values)^(.5) ) %*% t(ev$vectors)
for (tt in (G+1):(n-G)) {
stat[tt] <- get_Wk_fixed(X, k=tt, G, p = p, Croot )
}
}
if(method == "Score"){
C12 <- (ev$vectors) %*% diag( (ev$values)^(-.5) ) %*% t(ev$vectors)
mod <- lm(yX[,1] ~ yX[,2:p]-1)
H <- get_H_fixed(mod,yX[,2:p])
for (tt in (G+1):(n-G)) {
stat[tt] <- get_Tk_fixed(mod,k=tt,G,H,C12)
}
}
cps <- get_cps(stat,thresh,G, nu=nu, criterion) #locate
if(length(cps)>0) Reject<-TRUE
##Plot------------------------------------
if(do.plot){
plot.ts(stat, ylab="mosum") # plot test statistic
abline(h = thresh, col = "blue") #add threshold
abline(v = cps, col = "red")  #if rejecting H0, add estimated cps
pl <- recordPlot()
#plot( a*Tn - b); abline(h=c_alpha, col="blue") #rescaled plot
} else pl <- NULL
##Output------------------------------------
out <- list(thresh = thresh, mosum = stat, cps = cps, plot = pl)
return(out)
}
debugonce(mosumlm)
mosumlm(voldata[,3:5], voldata[,2])
X
mosumlm(voldata[,3:5], voldata[,2])
voldata[,2]
debugonce(mosumlm)
mosumlm(voldata[,3:5], voldata[,2])
debugonce(mosumlm)
mosumlm(voldata[,3:5], voldata[,2])
#' @return List containing
#' \itemize{
#'   \item{\code{thresh}}{ input}
#'   \item{\code{mosum}}{ vector of mosum detector values}
#'   \item{\code{cps}}{ estimated change points}
#'   \item{\code{plot}}{ detector plot}
#' }
#' @examples
#' data(voldata)
#' mosumlm(voldata[,3:5], voldata[,2])
mosumlm <- function(X, y, G = NULL, intercept = TRUE, method = c("Wald", "Score"), alpha = 0.05, criterion= c("eps","eta"), nu=0.25, thresh = NULL, do.plot = TRUE){
X <- as.matrix(X)
if(intercept) X <- cbind(X, 1)
out <- NULL
n <- dim(X)[1]
p <- dim(X)[2]+1
yX <- as.matrix(cbind(y,X))
if(is.null(G)) G <- default.G(n, sqrt(p-1), 1)
method <- match.arg(method, c("Wald","Score"))
criterion <- match.arg(criterion, c("eps","eta"))
nu <- min(1, max(0, nu))
alpha <- min(1, max(0, alpha))
##Test setup----------------------------
if(is.null(thresh)){
c_alpha <- -log(log( (1-alpha)^(-1/2))) #critical value
a <- sqrt(2*log(n/G)) #test transform multipliers
b <- 2*log(n/G) + (p-1)/2 * log(log(n/G)) - log(2/3 * gamma((p-1)/2)) ##CORRECTED
thresh <- (b+c_alpha)/a #threshold
thresh <- max(thresh, sqrt(2*log(n)) + c_alpha/sqrt(2*log(n)) )##ASYMPTOTIC
}
Reject <- FALSE
##Run test-----------------------------
stat <- rep(0, n) #initialise statistic vector
C <-t(yX[,2:p]) %*% (yX[,2:p]) / n
ev <- eigen(C)
##t(ev$vectors) %*% diag( (ev$values)^(-.5) ) %*% (ev$vectors)
if(method == "Wald") {
Croot <-  (ev$vectors) %*% diag( (ev$values)^(.5) ) %*% t(ev$vectors)
for (tt in (G+1):(n-G)) {
stat[tt] <- get_Wk_fixed(X, k=tt, G, p = p, Croot )
}
}
if(method == "Score"){
C12 <- (ev$vectors) %*% diag( (ev$values)^(-.5) ) %*% t(ev$vectors)
mod <- lm(yX[,1] ~ yX[,2:p]-1)
H <- get_H_fixed(mod,yX[,2:p])
for (tt in (G+1):(n-G)) {
stat[tt] <- get_Tk_fixed(mod,k=tt,G,H,C12)
}
}
cps <- get_cps(stat,thresh,G, nu=nu, criterion) #locate
if(length(cps)>0) Reject<-TRUE
##Plot------------------------------------
if(do.plot){
plot.ts(stat, ylab="mosum") # plot test statistic
abline(h = thresh, col = "blue") #add threshold
abline(v = cps, col = "red")  #if rejecting H0, add estimated cps
pl <- recordPlot()
#plot( a*Tn - b); abline(h=c_alpha, col="blue") #rescaled plot
} else pl <- NULL
##Output------------------------------------
out <- list(thresh = thresh, mosum = stat, cps = cps, plot = pl)
return(out)
}
mosumlm(voldata[,3:5], voldata[,2])
debugonce(mosumlm)
mosumlm(voldata[,3:5], voldata[,2])
rm(mosumlm)
devtools::check()
devtools::build_manual()
devtools::build()
devtools::install()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::build()
devtools::install()
roxygen2::roxygenise()
devtools::build()
devtools::install()
devtools::build_manual()
devtools::build()
devtools::install()
mosumvar::mosumvar.bs(rnorm(1000))
mosumvar::mosumvar.bs(rnorm(1000), 1, 100)
debugonce(mosumvar.bs)
debugonce(mosumvar::mosumvar.bs)
mosumvar::mosumvar.bs(rnorm(1000), 1, 100)
debugonce(mosumvar::mosumvar.bs)
mosumvar::mosumvar.bs(rnorm(1000), 1, 100)
x
get_T_RCPP(x[s:e, ], order, G - order -
1, mod_a, eps, PhiList = list(), estim, var_estim)
x[s:e, ]
get_T_RCPP(as.matrix(x[s:e, ]), order, G - order -
1, mod_a, eps, PhiList = list(), estim, var_estim)
devtools::build()
devtools::install()
mosumvar::mosumvar.bs(rnorm(1000), 1, 100)
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
?mosumvar::VAR.sim
mosumvar::VAR.sim
mosumvar:::VAR_sim(100)
mosumvar:::VAR_sim(100, c(0,0), diag(1, 2))
mosumvar:::VAR_sim(100, c(0,0), diag(1, 2) diag(1, 2))
mosumvar:::VAR_sim(100, c(0,0), diag(1, 2), diag(1, 2))
mosumvar:::VAR_sim(100, c(0,0), diag(1, 2), diag(1, 2), "t")
mosumvar::VAR.sim(100, error.dist = "t")
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2)))
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2))
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 5)
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 100)
devtools::build()
devtools::install()
library(mosumvar)
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 100)
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 100)
mosumfvar::fvar.sim
devtools::build()
devtools::install()
library(mosumvar)
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 3)
library(mosumvar)
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 3)
devtools::build()
devtools::install()
library(mosumvar)
mosumvar::VAR.sim(100, error.dist = "t", coeffs = diag(0.7, 2), df = 3)
devtools::build()
devtools::install()
devtools::build()
devtools::install()
